; Example PICA200 vertex shader

; Uniforms
.fvec projection[4], modelView[4]

; Constants
.constf myconst(0.0, 1.0, 0.8, 0.5)
.alias  zeros myconst.xxxx ; Vector full of zeros
.alias  ones  myconst.yyyy ; Vector full of ones
.alias  half  myconst.wwww
.alias  spec  myconst.zzzz


; Outputs
.out outpos position
.out outclr color
.out outview view
.out outnq normalquat

; Inputs (defined as aliases for convenience)
.in inpos v0
.in innrm v1
.in incol v2

.proc main
	; Force the w component of inpos to be 1.0
	mov r0.xyz, inpos
	mov r0.w,   ones

	; r1 = modelView * inpos
	dp4 r1.x, modelView[0], r0
	dp4 r1.y, modelView[1], r0
	dp4 r1.z, modelView[2], r0
	dp4 r1.w, modelView[3], r0
	mov outview, -r1

	; outpos = projection * r1
	dp4 outpos.x, projection[0], r1
	dp4 outpos.y, projection[1], r1
	dp4 outpos.z, projection[2], r1
	dp4 outpos.w, projection[3], r1

	; Transform the normal vector with the modelView matrix
	; r1 = normalize(modelView * innrm)
	mov r0.xyz, innrm
	mov r0.w,   zeros
	dp4 r1.x,   modelView[0], r0
	dp4 r1.y,   modelView[1], r0
	dp4 r1.z,   modelView[2], r0
	mov r1.w,   ones
	dp3 r2,     r1, r1 ; r2 = x^2+y^2+z^2 for each component
	rsq r2,     r2     ; r2 = 1/sqrt(r2)  ''
	mul r1,     r2, r1 ; r1 = r1*r2



	mov r0, incol
	
	mul r0, r1.zzzw, r0
	
	mov outnq, r1
	min outclr, ones, r0
	end
.end
